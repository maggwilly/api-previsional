<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SituationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SituationRepository extends EntityRepository
{

	public function stockParProduitPeriode ($region=null, $startDate=null, $endDate=null){

        $qb = $this->createQueryBuilder('s')->join('s.produit','p')->join('s.visite','v')->join('v.pointVente','pv');
        if($region!=null){
           $qb->where('pv.ville=:ville')
          ->setParameter('ville', $region);
          }
          if($startDate!=null){
           $qb->andWhere('v.date>=:startDate')->setParameter('startDate', new \DateTime($startDate));
          }
          if($endDate!=null){
           $qb->andWhere('v.date<=:endDate')->setParameter('endDate',new \DateTime($endDate));
          }
          $qb->addGroupBy('s.id');
          $qb->addSelect('sum(s.stock) as stock');
          $qb->addSelect('avg(s.mvj) as mvj');
          $qb->addSelect('avg(s.ecl) as ecl');   
          return $qb->getQuery()->getResult();
     
  }
//situation comparee
  public function stockParProduitDernier ($region=null, $startDate=null, $endDate=null){
    $em = $this->_em;
    $RAW_QUERY =($region!=null) ?'select * from (select p.id, p.nom,count(s.map) as map, count(s.rpp) as rpp, count(s.rpd) as rpd, sum(s.stock) as sd, sum(s.stockg) as sg, sum(s.mvj) as mvj, sum(s.ecl) as ecl from (select v.id,v.date from (select pv.id as pv , max(v.date) as date from point_vente pv join visite v  on pv.id=v.point_vente_id and v.date>=:startDate and v.date<=:endDate and pv.ville=:region group by  pv.id order by pv.id) as u  join  visite v on (u.pv=v.point_vente_id and u.date=v.date) ) as v join situation s on v.id=s.visite_id join (select p.nom, p.id, c.nom as nomCon from produit p left join produit c on p.concurent_id=c.id) p on p.id=s.produit_id group by p.nom,p.id) prod join produit p on prod.id=p.id;
'  : 'select * from (select p.id, p.nom, count(s.map) as map, count(s.rpp) as rpp, count(s.rpd) as rpd, sum(s.stock) as sd, sum(s.stockg) as sg, sum(s.mvj) as mvj, sum(s.ecl) as ecl from (select v.id,v.date from (select pv.id as pv , max(v.date) as date from point_vente pv join visite v  on pv.id=v.point_vente_id and v.date>=:startDate and v.date<=:endDate group by  pv.id order by pv.id) as u  join  visite v on (u.pv=v.point_vente_id and u.date=v.date) ) as v join situation s on v.id=s.visite_id join (select p.nom, p.id, c.nom as nomCon from produit p left join produit c on p.concurent_id=c.id) p on p.id=s.produit_id group by p.nom,p.id) prod join produit p on prod.id=p.id;'; 
  $statement = $em->getConnection()->prepare($RAW_QUERY);
        if($region!=null){
   $statement->bindValue('region', $region);
          }
    $startDate=new \DateTime($startDate);
    $endDate=new \DateTime($endDate);

     $statement->bindValue('startDate', $startDate->format('Y-m-d'));
     $statement->bindValue('endDate',  $endDate->format('Y-m-d'));
     $statement->execute();

      return  $result = $statement->fetchAll();
  }  
}
