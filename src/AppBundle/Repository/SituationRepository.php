<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SituationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SituationRepository extends EntityRepository
{



  public function stockParProduitPeriode ($region=null, $startDate=null, $endDate=null){
    $em = $this->_em;
    $RAW_QUERY =($region!=null) ?'select p.nom, p.dossier, moyenne,sd, presence from (select produit_id,sum(stock) as sd, avg(stock) as moyenne, avg(presence) as presence from( select s.produit_id, avg(s.stock) as stock,avg(case when s.stock>0 then 1 else 0 end) as presence from visite v join situation s on s.visite_id=v.id join point_vente pv on pv.id=v.point_vente_id and v.date>=:startDate and v.date<=:endDate and pv.ville=:region group by pv.id, s.produit_id) pdv group by produit_id) situation join produit p on p.id=situation.produit_id;
'  : 'select p.nom, p.dossier, moyenne,sd, presence from (select produit_id, sum(stock) as sd, avg(stock) as moyenne, avg(presence) as presence from( select s.produit_id, avg(s.stock) as stock,avg(case when s.stock>0 then 1 else 0 end) as presence from visite v join situation s on s.visite_id=v.id join point_vente pv on pv.id=v.point_vente_id and v.date>=:startDate and v.date<=:endDate group by pv.id, s.produit_id) pdv group by produit_id) situation join produit p on p.id=situation.produit_id;'; 
  $statement = $em->getConnection()->prepare($RAW_QUERY);
        if($region!=null){
   $statement->bindValue('region', $region);
          }
    $startDate=new \DateTime($startDate);
    $endDate=new \DateTime($endDate);

     $statement->bindValue('startDate', $startDate->format('Y-m-d'));
     $statement->bindValue('endDate',  $endDate->format('Y-m-d'));
     $statement->execute();

      return  $result = $statement->fetchAll();
  }  

//situation comparee
  public function stockParProduitDernier ($region=null, $startDate=null, $endDate=null){
    $em = $this->_em;
    $RAW_QUERY =($region!=null) ?'select p.id,situation.sd,situation.presence,p.dossier from (select id,  sum(sd) as sd, sum(presence) as presence from (select v.pv, p.id,  sum(s.stock) as sd, count((case when s.stock=0 then null else 1 end)) as presence  from (select v.id,v.date,u.pv from (select pv.id as pv , max(v.date) as date from point_vente pv join visite v  on pv.id=v.point_vente_id and v.date>=:startDate and v.date<=:endDate and pv.ville=:region group by  pv.id order by pv.id) as u  join  visite v on (u.pv=v.point_vente_id and u.date=v.date) ) as v join situation s on v.id=s.visite_id join produit p on p.id=s.produit_id group by p.id,v.pv) situation group by id ) situation join produit p on p.id=situation.id;'  : 'select p.id,situation.sd,situation.presence,p.dossier from (select id,  sum(sd) as sd, sum(presence) as presence from (select v.pv, p.id,  sum(s.stock) as sd, count((case when s.stock=0 then null else 1 end)) as presence  from (select v.id,v.date,u.pv from (select pv.id as pv , max(v.date) as date from point_vente pv join visite v  on pv.id=v.point_vente_id and v.date>=:startDate and v.date<=:endDate  group by  pv.id order by pv.id) as u  join  visite v on (u.pv=v.point_vente_id and u.date=v.date) ) as v join situation s on v.id=s.visite_id join produit p on p.id=s.produit_id group by p.id,v.pv) situation group by id ) situation join produit p on p.id=situation.id;'; 
  $statement = $em->getConnection()->prepare($RAW_QUERY);
        if($region!=null){
   $statement->bindValue('region', $region);
          }
    $startDate=new \DateTime($startDate);
    $endDate=new \DateTime($endDate);

     $statement->bindValue('startDate', $startDate->format('Y-m-d'));
     $statement->bindValue('endDate',  $endDate->format('Y-m-d'));
     $statement->execute();

      return  $result = $statement->fetchAll();
  } 
}
