<?php

namespace AppBundle\Repository;

/**
 * SouscripteurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SouscripteurRepository extends \Doctrine\ORM\EntityRepository
{

	 public function nombreCout($region=null, $startDate=null, $endDate=null){

        $qb = $this->createQueryBuilder('s')->join('s.produit', 'p');
        if($region!=null){
           $qb->where('s.ville=:ville')
          ->setParameter('ville', $region);
          }
        if($startDate!=null){
           $qb->andWhere('s.date is null or s.date>=:startDate')->setParameter('startDate', new \DateTime($startDate));
          }
          if($endDate!=null){
           $qb->andWhere('s.date is null or s.date<=:endDate')->setParameter('endDate',new \DateTime($endDate));
          }
          $qb->select('count(s.id) as nombre')
          ->addSelect('sum(p.cout) as cout');
         return $qb->getQuery()->getArrayResult();  
   
  }

  	 public function majoritaireCSP($region=null, $startDate=null, $endDate=null){
        $RAW_QUERY ='select * from (select csp, count(id) as nombre from souscripteur s  where s.date>=:startDate and s.date<=:endDate group by csp) m order by m.nombre desc limit 1';
       $statement = $this->_em->getConnection()->prepare($RAW_QUERY);
       $startDate=new \DateTime($startDate);
       $endDate=new \DateTime($endDate);
       $statement->bindValue('startDate', $startDate->format('Y-m-d'));
       $statement->bindValue('endDate',  $endDate->format('Y-m-d'));
       $statement->execute();
      return  $result = $statement->fetchAll();
   
  }

    	 public function majoritaireAge($region=null, $startDate=null, $endDate=null){
        $RAW_QUERY ='select * from (select age, count(id) as nombre from souscripteur s  where s.date>=:startDate and s.date<=:endDate group by csp) m order by m.nombre desc limit 1';
       $statement = $this->_em->getConnection()->prepare($RAW_QUERY);
       $startDate=new \DateTime($startDate);
       $endDate=new \DateTime($endDate);
       $statement->bindValue('startDate', $startDate->format('Y-m-d'));
       $statement->bindValue('endDate',  $endDate->format('Y-m-d'));
       $statement->execute();
      return  $result = $statement->fetchAll();
   
  }


  	 public function repartition($region=null, $startDate=null, $endDate=null){
        $qb = $this->createQueryBuilder('s')->join('s.produit','p');
        if($region!=null){
           $qb->where('s.ville=:ville')
          ->setParameter('ville', $region);
          }
        if($startDate!=null){
            $qb->andWhere('s.date is null or s.date>=:startDate')->setParameter('startDate', new \DateTime($startDate));
          }
          if($endDate!=null){
             $qb->andWhere('s.date is null or s.date<=:endDate')->setParameter('endDate',new \DateTime($endDate));
          }
          $qb->select('p.nom')
             ->addSelect('count(s.id) as nombre')
             ->addGroupBy('p.nom');
         return $qb->getQuery()->getArrayResult();  
  }


  	 public function evolutionByWeek($region=null, $startDate=null, $endDate=null){
        $qb = $this->createQueryBuilder('s');
        if($region!=null){
           $qb->where('s.ville=:ville')
          ->setParameter('ville', $region);
          }
        if($startDate!=null){
            $qb->andWhere('s.date is null or s.date>=:startDate')->setParameter('startDate', new \DateTime($startDate));
          }
          if($endDate!=null){
             $qb->andWhere('s.date is null or s.date<=:endDate')->setParameter('endDate',new \DateTime($endDate));
          }
          $qb->select('s.week')
             ->addSelect('count(s.id) as nombre')
             ->addGroupBy('s.week');
         return $qb->getQuery()->getArrayResult();  
  }



 	 public function evolutionByMonth($region=null, $startDate=null, $endDate=null){
        $qb = $this->createQueryBuilder('s');
        if($region!=null){
           $qb->where('s.ville=:ville')
          ->setParameter('ville', $region);
          }
        if($startDate!=null){
            $qb->andWhere('s.date is null or s.date>=:startDate')->setParameter('startDate', new \DateTime($startDate));
          }
          if($endDate!=null){
             $qb->andWhere('s.date is null or s.date<=:endDate')->setParameter('endDate',new \DateTime($endDate));
          }
          $qb->select('s.month')
             ->addSelect('count(s.id) as nombre')
             ->addGroupBy('s.month');
         return $qb->getQuery()->getArrayResult();  
  }



   	 public function especesByMonth($region=null, $startDate=null, $endDate=null){
        $qb = $this->createQueryBuilder('s')->join('s.produit', 'p');
        if($region!=null){
           $qb->where('s.ville=:ville')
          ->setParameter('ville', $region);
          }
        if($startDate!=null){
            $qb->andWhere('s.date is null or s.date>=:startDate')->setParameter('startDate', new \DateTime($startDate));
          }
          if($endDate!=null){
             $qb->andWhere('s.date is null or s.date<=:endDate')->setParameter('endDate',new \DateTime($endDate));
          }
          $qb->select('s.month')
             ->addSelect('sum(p.cout) as cout')
             ->addGroupBy('s.month');
         return $qb->getQuery()->getArrayResult();  
  }

    public function performances($region=null, $startDate=null, $endDate=null, $limit=true){
    $em = $this->_em;
    $RAW_QUERY ='select * from (select  user_id, count(user_id) as nbrejours, sum(nombre) as nombre from (select user_id, date, count(*) as nombre from souscripteur s  where s.date>=:startDate and s.date<=:endDate group by s.date , s.user_id ) t group by user_id) p join user_account u on u.id=p.user_id order by p.nombre ';
    if ($limit) {
      $RAW_QUERY=$RAW_QUERY.'limit 5;';
      }else
      $RAW_QUERY=$RAW_QUERY.';';
    $statement = $em->getConnection()->prepare($RAW_QUERY);
    $startDate=new \DateTime($startDate);
    $endDate=new \DateTime($endDate);
     $statement->bindValue('startDate', $startDate->format('Y-m-d'));
     $statement->bindValue('endDate',  $endDate->format('Y-m-d'));
    
     $statement->execute();
      return  $result = $statement->fetchAll();
  }  
   
   
}
